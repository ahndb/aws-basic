사진 밑으로 내려야함 등록했을 때
수정 / 삭제 /

공지사항


구글 aws 가입

계정 내정보 에서 보안자격증명 안에서 MFA 등록
(구글 스토어 Google Authenticator 어플 다운후 스캔)

검색 - > i am - > iam 대시보드
사용자 클릭후 사용자 생성
권한 : 그룹에 사용자 추가후 완료

비밀번호 지정
생성된 아이디 클릭
보안 자격증명 - 콘솔 액세스 활성화 - 사용자 지정 암호 - 콘솔액세스 활성화
https://381491987717.signin.aws.amazon.com/console (콘솔 url 복사)

왼쪽 대시보드에서 액세스관리 - 사용자 그룹 -  그룹 생성
검색에 PowerUserAccess(리소스접근권한) , IAMFullAccess(IAM 접근 권한) 검색 후 체크 (2개)
그룹 생성하기

★로그인하게되면 항상 지역이 서울로 찍혀있는지 확인 해야 함★
위에 복사한 주소로 로그인하면됨

검색에 vpc 검색후 즐겨찾기 등록해놓고 클릭 (대여 공간)
vpc 생성 - vpc만 클릭 - 10.0.0.0/16 - 블록없음 체크 - 태넌 기본값 체크-vpc 생성

왼쪽 대시보드에서 서브넷 클릭
서브넷 생성 - vpc 아이디 생성 기본값 선택하지말고 내가만든것 체크
mincheol-public-01 /  아시아 - 서울 - 2a /서브넷 cidr 10.0.0.0/20 /
추가 서브넷 생성 - / 아시아 - 서울 - 2c (분리) /  서브넷 10.0.16.0/20 /

mincheol-public-02
추가 서브넷 생성 -  /아시아 -서울-2a (역할 분리)  / 10.0.64.0/20 /
추가 서브넷 생성 - / 아시아 - 서울 - 2c (분리) /  서브넷 10.0.80.0/20 /
4개 추가후 서브넷 생성

== public , private 공간을 2군대로 나눔 2a / 2c ==

인터넷 게이트웨이 만들기
- 인터넷 게이트웨이 대시보드 클릭 - 인터넷 게이트웨이 생성
- 이름 지정후 생성
- 작업 태그 - vpc 연결 선택
- 사용가능한 vpc 선택후 게이트웨이 연결 클릭


대시보드에서 NAT 게이트웨이 클릭
nat게이트웨이 생성 -  퍼블릭 01 - 탄력적 ip 할당 - 게이트웨이 생성
nat 게이트웨이 생성 - 퍼블릭 02 - 탄력적 ip 할당 - 게이트웨이 생성
외부와 연결할 수 있게끔 지정함

라우팅 테이블로 내선작업을 진행함
라우팅 테이블 - 라우팅 테이블 생성 -  기본값 선택하지말고 내가만든 것 선택 후 생성
내선을 만들었으니 내부에서 연결해줘야함
서브넷 연결 카테고리 -  서브넷 연결 편집 - public 01 / 02 선택 - 연결 저장

public 내선을 외부와 연결해주는 작업
라우팅 테이블 -  내가만든 라우팅 테이블 편집 - 0.0.0.0/0 (모두) 선택후 / 인터넷게이트웨이 선택후 내가만든 igw 선택 후 변경사항 저장

private 설정
라우팅 테이블 - 테이블 생성 - 내가만든 vpn 선택후 - 생성
서브넷도 지정해줘야함
라우팅 테이블 -  내가만든 라우팅 테이블 편집 - 0.0.0.0/0 (모두) 선택후 / natgateway선택후 내가만든 거 선택 후 변경사항 저장   01
라우팅 테이블 -  내가만든 라우팅 테이블 편집 - 0.0.0.0/0 (모두) 선택후 / natgateway선택후 내가만든 거 선택 후 변경사항 저장   02

보안에 - 보안그룹- 보안그룹 생성
- vpc - 지정 하기
-  인바운드 규칙 - SSH 유형 -  anywhere - ipv4 소스  지정 -  보안그룹 이름으로 태그 지정 ( name / mincheol-sg)

보안그룹 생성
- vpc - 지정 - 인바운드 규칙 - http / https  / anywhere - ipv4 소스  지정 -  보안그룹 이름으로 태그 지정 ( name / mincheol-sg-elb)
윈도우 - 프로그램 추가 / 제거 - 왼쪽 검색 란에 " 선택적 기능 관리" / OpenSSH 클라이언트 있는지 확인 /

점프서버 
검색쪽에 ec2 검색후 선택 - 키페어 (네트워크 및 보안) -  키페어 생성
[ RSA / .pem(OpenSSH) / Name-Mincheol-keypair ]  - 키페어 생성 - 폴더 다운로드됨
인스턴스 - 인스턴스 시작 -  [이름 , amazonLinux , Amazon Linux 2  AMI  , t2.micro]
만들었던 키 페어 선택 - mincheol
네트워크 설정 - 편집 -  vpc (내가만든 걸로 선택) - 서브넷 (public - 01) - 퍼블릭 IP 자동 할당 ( 활성화 ) - 방화벽(기존 보안 그룹 선택 ) -  일반 보안그룹 (default , sg vastion ) - 인스턴스 시작
(시간이 지나며 인스턴스 상태가 바뀌게 됨)

mincheol-ec2-web-01 이름으로  
인스턴스 - 인스턴스 시작 -  [이름 , amazonLinux , Amazon Linux 2  AMI  , t2.micro]
만들었던 키 페어 선택 - mincheol
네트워크 설정 - 편집 -  vpc (내가만든 걸로 선택) - 서브넷 private- 01) - 퍼블릭 IP 자동 할당 ( 비활성화 ) - 방화벽(기존 보안 그룹 선택 ) -  일반 보안그룹 (default ) - 인스턴스 시작

mincheol-ec2-web-02 이름으로 
인스턴스 - 인스턴스 시작 -  [이름 , amazonLinux , Amazon Linux 2  AMI  , t2.micro]
만들었던 키 페어 선택 - mincheol
네트워크 설정 - 편집 -  vpc (내가만든 걸로 선택) - 서브넷 private- 02) - 퍼블릭 IP 자동 할당 ( 비활성화 ) - 방화벽(기존 보안 그룹 선택 ) -  일반 보안그룹 (default ) - 인스턴스 시작


퍼블릭 인스턴스 선택후 연결 누르면 리눅스 터미널 열림.
프라이빗은 현재 할당된 퍼블릭 주소가없어서 들어갈 수 없음.
프라이빗을 연결하려면 키 페어를 가지고 있어야함. (public 01와 연결하려면 퍼블릭 01이 키페어를 가지고 있어야함)


폴더 - c 드라이브 - 사용자 - itps -  .ssh 확인 - .ssh 폴더 생성 -  키페어만들때 생성되던 파일을 .ssh 폴더 안에 넣어준다.
vscode 로 - .ssh 안에 - config 파일명으로 (확장자 없음) -
Host bastion
    Hostname 43.203.179.108
    User ec2-user
    IdentityFile ~\.ssh/mincheol.pem 작성 후

Windows PowerShell 관리자권한으로 실행 (윈도우 에서)
ssh - bastion 입력 - yes
exit 나가는 버튼

Host bastion
    Hostname 43.203.179.108
    User ec2-user
    IdentityFile ~\.ssh\mincheol.pem

Host web01
    Hostname 10.0.68.35
    User ec2-user
    IdentityFile ~\.ssh\mincheol.pem
    ProxyCommend ssh.exe bastion -W %h:%p

Host web02
    Hostname 10.0.88.212
    User ec2-user
    IdentityFile ~\.ssh\mincheol.pem
    ProxyCommend ssh.exe bastion -W %h:%p

서버 3개 설정후 

ssh web01 / ssh web02 둘다 접속 확인

로드밸런서 (대시보드) 설정
로드밸런서 생성 -  Application Load Balancer 생성 - 이름 = mincheol-elb - vpc (내가만든걸로 설정) -
매핑 - 2a / 2c 체크 / public-01 , public-02 설정 -  보안그룹 (sg-elb , default ) -
리스너 및 라우팅
http는 80번으로 들어올때 어떠한 걸로 내보낼것인지 설정  - 대상그룹 생성 클릭
기본구성 - 인스턴츠 체크 - 대상그룹이름(mincheol-tg) - 프로토콜:포트(3000번 지정)
다음 클릭

대상 등록  (web01 , web02 체크) - 아래에 보유중인것 포함 클릭 - 대상 그룹 생성
다시 돌아와서 리스너 및 라우팅에서 방금 생성된 tg 선택 후 로드 밸런서 생성

리눅스 터미널에서 exit / - clear 입력
ssh web01 입력
vim index.html 입력
i 입력후 INSERT 모드로 변경
<html><body> Web 01 Server!!!</body></html>
esc 입력 / : 입력 / wq 입력
<web 02도 작업 똑같이 함>

python --version으로 파이썬 확인
python -m SimpleHTTPServer 3000
< 위의 파이썬 명령어 둘다 작업 해주면 됨>

그런 다음 로드밸런서 보면 상태 활성으로 되어 있게 됨
DNS 이름 복사후 인터넷 주소창에 입력함
mincheol-elb-1245501532.ap-northeast-2.elb.amazonaws.com

==================================================================================================================

데이터베이스 서버 
RDS 검색창에 검색 - 대시보드 - 파라미터 그룹 - 파라미터 그룹 생성 
그룹 이름 (mincheol-
-pg) - 설명 (mysql ) - 엔진 유형(mysqlcommunity edition) - 그룹 패밀리(내가쓰는 my sql 버전 ex 8.0)- 유형 (DB 파라미터 그룹)

옵션 그룹 - 옵션 그룹 생성  
이름 - 설명 - 엔진 (mysql) - 메이저 엔진 (8.0) - 생성

서브넷 그룹 - DB서브넷 그룹 생성
이름 - 설명 - vpc (내가만든거 선택) - 서브넷 가용영역(2a , 2c) - 서브넷(64 , 80 설정 2c의 64 / 2a 의 80) 선택

대시보드에서 데이터베이스 클릭
데이터베이스 생성 클릭 -  표준 생성 - 엔진 옵션 (mysql) -  엔진 버전 (8.0.36 했던 버전 클릭)
템플릿 -  프리티어 - DB(인스턴스 식별자 mincheol-mysql) - P!ssw0rd (마스터 암호)
연결에서 VPC (내가 만들었던걸로 선택)- 가용 영역 (2a 로 지정) -
추가구성에서
파라미터그룹 (내가만든 걸로) - 옵션그룹 (내가 만든 걸로) - 자동 백업 활성화 해제 필수 , 암호화 활성화 체크 해제 필수
유지관리 (마이너버전 자동 업그레이드 해제 필수) - 데이터베이스 생성
데이터베이스 작업은 쉘에서 직접하게됨

아래와 같은 형태로 만들게 됨(VPC)
개발 형태
점프
front
back
DB

개발 / 테스트 / 배포 3가지의 영역을 만들게 됨
테스트 형태
            점프
public 1   public 2
private1 private 2

배포 형태
                     점프
      프론트	          프론트
 백엔드 백엔드  백엔드  백엔드
DB서버 DB서버 DB서버 DB서버
DB의 경우 한개의 서버에서만 CARD 하고 나머지는 SELECT 작업 위주로 함


web01 서버에서
sudo yum-y install mysql
mysqladmin ping -u admin -p -h mincheol-mysql.c9ic4aw8urd3.ap-northeast-2.rds.amazonaws.com
mincheol 포함 뒷부분은 앤드포인트 및 포트 에서 가져온 코드

이미지 저장소 (vpc 밖에다 만드는 작업)
S3 검색 - 버킷만들기 - 버킷키 비활성화
이미지를 다른 컴퓨터로도 주고받기 가능

검색에 I AM 입력후 이동
역할 -> 역할 생성 -> aws 서비스 -> 사용사례 (EC2 체크)-권한 추가 (amazons3FullAcess 체크 후 다음)
역할 이름 -> 역할 생성 

검색에 EC2 입력후 이동
인스턴스 누른 후  - bastion instance 클릭 -  작업 - 보안 - iam 역할 수정 - iam 역할 선택 (내가 만든것 선택)

파일 올리는 작업
터미널에서
ssh bastion 
vim text.txt
aws s3/cp/text.txt s3://mincheol-bucket-24-06-03

삭제 순서
S3- RDS - EC2 (로드밸런서) - EC2 (인스턴스 종료) -RDS (옵션그룹,파라미터,서브넷 삭제)
VPC(보안그룹  sg, elb 삭제)  , VPC (라우팅테이블 퍼블릭 프라이빗 서브넷 연결 전부 해제 후 삭제)
VPC(nat 게이트웨이 전부 삭제) - vpc(서브넷 퍼블릭 프라이빗 전부 삭제)
VPC(인터넷 게이트웨이 작업에서 VPC 분리 한후 다시 작업에서 삭제) - vpc(탄력적 IP 에서 퍼블릭 전부 릴리스)
VPC(에서 바로뜨는거 삭제)
iam(역할에서 S3 삭제)
로그아웃

다시 로그인해서
iam 사용자 아이디와 사용자 그룹 삭제 


================================
배포 해보기(백)

★i am  에서 사용자 만들기
사용자 그룹 - 그룹 생성 - 그룹 이름 - 내가만든 사용자 추가 -권한 - iamfullaccess / poweruseracess 체크

사용자 - 보안자격증명 - 콘솔 액세스 관리 클릭 - 사용자 지정으로 비밀번호 설정
사용자 이름 - mincheol
비번 - e5933910!
콘솔 url
https://381491987717.signin.aws.amazon.com/console

★vpc 만들기(위 참조)

서브넷 생성 ( 4 개 )
 - estate-servnet-front 10.0.0.0/20 / 2a
 - estate-servnet-back 10.0.0.0/20 / 2c
 - estate-servnet-database-01/ 10.0.32.0/20 / 2a
 - estate-servnet-database-02 / 10.0.48.0/20 / 2c

인터넷 게이트웨이 생성 
- estate-igw  생성 - 연결할 vpc 연결

라우팅 테이블 생성
- estate-rt-public 생성 - 내가만든 vpc 선택 - 라우팅 테이블 생성
- 서브넷 연결 - 편집 클릭 - 전부 연결 체크 후 저장
- 라우팅 편집 - 0.0.0.0/0 (모두) - igw 연결

보안그룹 생성 (3개)
※생성 할 때 3개 전부 내가 만든 VPC 선택 해주기
- estate-sg-front - 인바운드 규칙 (SSH) / 사용자지정 TCP (3000)  설정 - 태그 Name / estate-sg-front-sub
- estate-sg-back - 인바운드 규칙 (SSH) / 사용자지정 TCP (4000) 설정 - 태그 Name / estate-sg-back-sub
- estate-sg-database -인바운드 규칙 (SSH) /  MYSQL/Aurora (3306) 설정 - 태그 Name /  estate-sg-database-sub

★EC2 검색후 들어가기

인스턴스 - 인스턴스 시작 
estate-ec2-front   - Ubuntu 선택(22.04 ) - 새 키페어 생성 -  . pem - 키페어 생성 - 네트워크 편집 - vpc(내가만든 것) - 서브넷 (프론트 서브넷) - 퍼블릭 자동할당 활성화 - front , default 체크 - 인스턴스 시작
estate-ec2-back  - Ubuntu 선택(22.04 ) - 새 키페어 생성 -  . pem - 키페어 생성 - 네트워크 편집 - vpc(내가만든 것) - 서브넷 (백 서브넷) - 퍼블릭 자동할당 활성화 - back, default 체크 - 인스턴스 시작

★RDS 검색후 들어가기
서브넷 , 파라미터 , 옵션 만들어야 함
서브넷 그룹 생성 - estate-mysql-subnet -설명- vpc 선택 - 서브넷 추가 (가용영역 확인 2a 2c) - 서브넷 선택 (32,48) - 생성 
파라미터 그룹 생성 - estate-mysql-pg -설명-mysql  80- 생성 
옵션 그룹 생성 - estate-mysql-og - 설명- mysql 80 - 생성

데이터베이스 만들기
데이터베이스 생성 - 
 - 표준 생성 - mysql 엔진 옵션- sql 내가쓰는 버전 선택 - 탬플릿 (프리티어 선택) - 설정 DB인스턴스식별자 (estate-mysql) - 마스터 사용자이름 (admin) -자격증명 설정 (자체 관리) - 암호 설정 -vpc (내가만든 것 체크) 
- 퍼블릭액세스 (예 설정) - 기존 vpc 보안그룹 (default ,estate-sg-mysql) - 가입영역 2a - 추가구성 (포트번호 확인) - 태그 (name / estate-mysql) - 데이터베이스 인증 (암호 인증)  
추가구성 = 파라미터그룹 (내가만든 것 ) - 옵션그룹 (내가만든 것) -모니터링 체크 해제- 백업 체크 해제 필수  -암호화 활성화 체크 해제 - 유지관리 자동 업그레이드 체크 해제  - 데이터베이스 생성 
(생성이 안되면) 새로운창에서 다시 열어서 vpc로 이동하여 vpc 선택
작업 - vpc 설정 편집 - DNS 설정 - DNS 호스트 설정 활성화 체크 후 저장

데이터 베이스에 내가만든거 선택해서 엔드포인트 복사
workbench 열기 - 이름 : aws -  host name에 복사한거 넣어주기
username : admin
비밀번호 : P!ssw0rd (계속해서 만들었던 비밀번호)

원래 작업하던 공간에서 
estate - send to sql - create statement 
estate-각 테이블마다 - 우클릭 후 - send to sql -create statement
engine - 적혀있는 행 삭제

CREATE USER 'developer'@'%' IDENTIFIED BY 'P!ssw0rd';
GRANT ALL PRIVILEGES ON estate.* TO 'developer'@'%';

전체 쿼리를 aws 만든곳 쿼리문에 집어넣고
전부 실행

# MY SQL 데이터베이스 연결 
spring.datasource.url= jdbc:mysql://estate-mysql.csb3bokbhsgm.ap-northeast-2.rds.amazonaws.com:3306/estate?serverTimezone=UTC&characterEncoding=UTF-8
포트 번호 쪽에 aws 데이터베이스 엔드포인트 저장한거 넣어주기
estate-mysql.csb3bokbhsgm.ap-northeast-2.rds.amazonaws.com:3306

실제 개발 방식
로컬	개발하는 곳	개발(완료/테스트)	배포(상용화단계)
Local	development	staging		production
127.0.0.1	db.estate.dev	db. estate.stag	db.estate.pr

환경변수 저장하는곳을 여러개로 나눔
application.properties를 4개 만들어서 관리 (백)
application-development (추가 )
application-staging (추가)
application-production (추가)

컨트롤러 만들기
@RestController
@RequestMapping("/")
public class MainController {
    

    @Value("${deploy.env}")
    private String DEPLOY_ENV;

    @GetMapping("/")
    public String serverCheck() {
        return DEPLOY_ENV + "환경에서 실행 중...";
    }
}


빌드 만들기
war =web , jar = 실행하는 용도 
war 사용시 톰캣이라는게 있어야함
build.gradle
- war 삭제
- version = '1' 
- dependencies 에서 provider 를 runtime only로 바꿔야함

터미널에서 백으로 이동하고
./gradlew clean build 
하면 필드 폴더에서 libs 생기고
java --version 으로 버전 확인하고
 java -jar build/libs/back-1.jar (기존의 서버)
java -jar -Dspring.profiles.active=development build/libs/back-1.jar (디벨롭 서버)

배포상태에서 로컬호스트 3000번으로 보내면 안되기에
properties 에추가
# Front End
front.host=http://localhost:3000
작업

aws 에서 EC2 - 인스턴스 - front의 퍼블릭 주소를 복사해서
front.host=http://43.202.59.249:3000 으로 지정해주면됨 
properties 전부 (4개)

핸들러에 Oauth에서 
    @Value("${front:host}")
    private String FRONT_HOST;
       response.sendRedirect(FRONT_HOST + "/sns/" + token + "/36000");
작성

코드를 변경했으면 터미널에서
./gradlew clean build 해서 빌드를 다시 작업해주고
java -jar -Dspring.profiles.active=development build/libs/back-1.jar (디벨롭 서버)
로 실행 (경로 확인 잘해야 함)

★여기까지 작성한걸 인스턴스에 올리는 작업하기
백에서 git init으로 메인 다시 잡아줌
.gitignore 에 
*.properties 
# build/
커밋까지 작업 후
레포지토리 새로 작성 후
git remote add origin https://github.com/devKMC/estate-back-2024-06-04-deploy.git
git push -u origin main복사해서 터미널에서 코드 입력

aws (EC2)인스턴스

인스턴스 플랫폼 이름 : Ubuntu
백 퍼블릭주소 복사 - 3.39.251.189
시작 시 할당된 키 페어 - newSjh (.pem 은 필요없음)
.ssh 만들었던 곳에서 config - hostname 자리를 변경

작성 예시
Host estate-back
    Hostname 3.39.251.189
    User Ubuntu
    IdentityFile ~\.ssh\newSjh.pem

Host bastion
    Hostname 43.203.179.108
    User ec2-user
    IdentityFile ~\.ssh\mincheol.pem

Host web01
    Hostname 10.0.68.35
    User ec2-user
    IdentityFile ~\.ssh\mincheol.pem
    ProxyCommand ssh.exe bastion -W %h:%p

Host web02
    Hostname 10.0.88.212
    User ec2-user
    IdentityFile ~\.ssh\mincheol.pem
    ProxyCommand ssh.exe bastion -W %h:%p

그다음 powershell 관리자 권한으로 실행
ssh estate-back     입력 후 yes
git --version
git clone 나의 레포지토리 주소
sudo apt update (powershell 작업)
sudo apt install openjdk-17-jdk (powershell 작업)
환경변수가 잡혀있는지 보기 위해
echo $JAVA_HOME 아무것도 뜨지않으면 환경변수가 설정이 되어있지 않다는 것

power shell ->cd/usr/lib
power shell ->ls
power shell ->cd jvm
power shell ->ls
power shell ->cd ~
power shell ->sudo vi /etc/environment
power shell ->i
power shell ->코드 제일 끝으로 이동하고 다음행까지 이동 (방향키로)
power shell ->JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64 입력하고 esc누르고 :wq enter
power shell ->sudo vi /etc/environment
power shell ->source /etc/environment
power shell ->echo $JAVA_HOME
power shell ->cd estate-back-2024-06-04
power shell ->java -jar -Dspring.profiles.active=development build/libs/back-1.jar

내가 만든 백 인스턴스에서
퍼블릭 ipv4 주소 복사후 인터넷창에 입력 3.39.251.189:4000
터미널 종료후 인터넷창 새로고침시 안뜸

백그라운드에서 돌아가게끔 지정해야 함
power shell 실행
power shell ->ssh estate-back
power shell ->cd estate-back-2024-06-04            (깃에 올린 파일 이름)
power shell ->nohup java -jar -Dspring.profiles.active=development build/libs/back-1.jar & 하고나서 엔터 꼭 입력
power shell ->tail -f nohup.out

주소창에서 
http://localhost:4000/api/v1/auth/oauth2/kakao 입력시 앱 관리자 설정 오류 뜨게 됨

개발자센터 - 플랫폼 - 수정 - http:// 퍼블릭 주소 작성 (back)
http://localhost:4000
http://나의 백 퍼블릭 주소:4000

리다이렉트 등록 - 상태 ON 
http://localhost:4000/oauth2/callback/kakao
http://나의 백 퍼블릭 주소:4000/oauth2/callback/kakao

power shell 실행
백그라운드에 켜져있는 서버를 끄기
power shell ->ps -ef | grap build/libs
power shell ->kill -9 23242(포트번호)         <포트번호는 develop 계정 포트번호 선택>
power shell ->ps -ef | grap build/libs      죽었는지 확인하기

서버 켜기
power shell ->cd estate-back-2024-06-04
power shell ->nohup java -jar -Dspring.profiles.active=development build/libs/back-1.jar & 하고나서 엔터 꼭 입력
power shell ->tail -f nohup.out

======================================
배포 해보기(프론트)
constant에 추가
export const SNS_SIGN_IN_REQUEST_URL =(type: string)=> `${SERVER_AUTH_MODULE_URL}/oauth2/${type}`
views -Authentication -index-tsx
window.location.href = 'http://localhost:4000/api/v1/auth/oauth2/' + type;
위 코드 부분을 수정
window.location.href = SNS_SIGN_IN_REQUEST_URL(type);

프론트 폴더에
4개의 env 생성 파일 생성 (환경변수 저장하는 곳)

코드 작성
.env 안에
REACT_APP_REST_API_SERVER_DOMAIN=http://localhost:4000
REACT_APP_ENVIRONMENT=local

.env.development 안에
REACT_APP_REST_API_SERVER_DOMAIN=http://(aws나의 백엔드 주소):4000
REACT_APP_ENVIRONMENT=development

.env.staging 안에
REACT_APP_REST_API_SERVER_DOMAIN=http://(aws나의 백엔드 주소):4000
REACT_APP_ENVIRONMENT=staging

.env.production 안에
REACT_APP_REST_API_SERVER_DOMAIN=http://(aws나의 백엔드 주소):4000
REACT_APP_ENVIRONMENT=production

콘스탄트에 코드 변경
// description: API URL PATH 
export const SERVER_DOMAIN_URL = process.env.REACT_APP_REST_API_SERVER_DOMAIN;
export const SNS_SIGN_IN_REQUEST_URL = (type : string) => `${SERVER_AUTH_MODULE_URL}/oauth2/${type}`;
app.tsx 에서
// component: Application 컴포넌트 //
function App() {
    console.log(process.env.REACT_APP_ENVIRONMENT);
콘솔 추가해서 확인하기 
develop

========================

터미널에서 컨트롤 C 이후
npm install dotenv 입력 이후
npm i dotenv-cli 입력
package.json 파일에서 밑에코드로 수정
"start": "dotenv -e .env react-scripts start",
콘솔 추가해서 확인하기 
local

========================

package.json 파일에서 밑에코드로 수정
  "scripts": {
    "start": "dotenv -e .env react-scripts start",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "build:local": "dotenv -e .env react-scripts build",
    "build:development": "dotenv -e .env.development react-scripts build",
    "build:staging": "dotenv -e .env.staging react-scripts build",
    "build:production": "dotenv -e .env.production react-scripts build"
  }
 
터미널 입력하기

npm run build:development 로 빌드업하면
노드모듈위에 빌드 폴더 생성됨
 
npm install -g serve 로 글로벌 설정 지정 함

serve -s build 터미널에 입력 하게 되면
   │   - Local:    http://localhost:3000      		│
   │   - Network:  http://192.168.1.22:3000 	|
local 주소를 인터넷 주소창에 입력하면 됨
컨트롤 C 입력후 git init 지정해서 main으로 잡음

.gitignore 에서 /build 부분을 주석해야 함
그리고 env가 올라가지 않게끔 지정함
# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

.env
.env.development
.env.staging
.env.production

프론트 배포 레포지토리를 만들고
git remote add origin https://github.com/devKMC/estate-front-2024-06-04-deploy-.git
git push -u origin main

(만약에 마스터로 잡혀있다면 git branch -M main 이 명령어 사용)
.ssh config 파일에

프론트 부분 추가
Host estate-front
    Hostname 3.39.251.189
    User Ubuntu
    IdentityFile ~\.ssh\newSjh.pem

Host estate-back
    Hostname 3.39.251.189
    User Ubuntu
    IdentityFile ~\.ssh\newSjh.pem

이후 파워쉘 터미널 새로 열어주기
power shell ->ssh estate-front 입력후 yes 입력
power shell ->git clone https://github.com/devKMC/estate-front-2024-06-04-deploy
power shell ->cd estate-front-2024-06-04
power shell ->node --version
노드가 깔려있지 않음
power shell ->curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash
power shell ->seource ~/.bashrc
power shell ->nvm list-remote
power shell ->nvm install v20.14.0
power shell ->node --version
v20.14.0
power shell ->npm --version
power shell ->npm install -g npm
power shell ->npm --version
(최신버전)
power shell ->npm install -g serve
power shell ->serve -s build 

error뜨지만 주소창에 퍼블릭주소로 들어가면됨
http://(퍼블릭 주소):3000
파워쉘 터미널을 끄게되면 접속되지 않기 때문에

관리자 권한으로 실행 후
power shell ->ssh estate-front
power shell ->cd estate-front-2024-06-04
power shell ->npm install -g pm2                    // 노훅 대신 사용함 
power shell ->pm2 ecosystem
power shell ->vi ecesystem.cofig.js
power shell ->i (인서트작업을 위한)
power shell -> (백스페이스로 객체 안에 2번째 중괄호부터 deploy 코드까지 삭제)
power shell -> (뒤에오는 객체 하나 더 삭제 script watch 한행씩)
{]
);
power shell ->
apps: [{
name:'estate-front',
script: 'serve -s build',
watch: 'build'
}]
);

power shell -> (esc   ,  :  ,  wq 로 나가기)
power shell ->pm2 start ecosystem.cofig.js
power shell ->pm2 status
status에 온라인이 떠 있어야함

그리고 인터넷 주소창에
 http://(내가 만든 프론트 퍼블릭 주소):3000      
	
power shell ->pm2 kill
power shell ->pm2 status
power shell ->pm2 start ecosystem.cofig.js

코드수정하면
npm run build:development 
푸쉬하고 다시 파워쉘에서 git pull 작업 후 확인해야함

삭제하기
rds - 데이터베이스 - 작업에 삭제 스냅생성 체크 해제 / 인스턴스 삭제시 적혀있는건 체크 /  delete
EC2 - 인스턴스 - 프론트 / 백 체크해서 인스턴스 상태 누른후 / 인스턴스 종료 / 종료
VPC- 보안 - 보안그룹 - 보안그룹들 전부 삭제 / 작업 / sql , 백 , 프론트 삭제 /
         - 인터넷게이트웨이 - 작업 - 분리 -체크해서 작업에서 인터넷게이트웨이 삭제
         - 라우팅 테이블 삭제 
         - 서브넷 삭제